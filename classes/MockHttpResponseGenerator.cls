@isTest
global class MockHttpResponseGenerator implements HttpCalloutMock {
    // Implement this interface method
    global HTTPResponse respond(HTTPRequest req) {
        // Optionally, only send a mock response for a specific endpoint
        // and method.
        System.assertEquals(ConfigService.matchPortalEndpoint + '/api/match_service/matches?match_id=name&token='+ConfigService.matchPortalToken, req.getEndpoint());
        System.assertEquals('GET', req.getMethod());
        
        // Create a fake response
        HttpResponse res = new HttpResponse();
        res.setHeader('Content-Type', 'application/json');
        res.setBody('{"matchInfo":[{"match_id":"name","match_agorithm_version":1,"guardant_notes":"words","client_notes":"words","referred":"Yes","permission_to_connect_with_pharma":"Yes","priority":"High","competing_trials":"Yes","trial_id":"TRIAL","ordering_practice_site_type":"CRO","match_status":"Accepted","closest_trial_site":{"pharma_site_id": "SITE"},"pharma_company_id": "COMPANY","show_to_customer":"Yes","date_of_first_contact":"2017-03-26T13:56:09.435Z","date_identified":"2017-03-26T13:56:09.435Z","date_of_last_contact":"2017-03-26T13:56:09.435Z","date_enrolled":"2017-03-26T13:56:09.435Z","date_ineligible":"2017-03-26T13:56:09.435Z","date_referred":"2017-03-26T13:56:09.435Z","enrollment_status":"Closed","enrollment_status_sub_status":"Ineligible and Reason","enrollment_status_sub_reason":"Death","qualifying_target_alts":[{"alt_string":"alt_string"},{"alt_string":"alt_string2"}],"pods":[{"filename":"filename"},{"filename":"filename2"}]}]}');
        res.setStatusCode(200);
        return res;
    }
    public static void restMethod(){
    	Integer i = 0;
    	i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
    }
}